# #sunset lights on if someone at home
# - alias: sunset lights on
#   initial_state: false
#   trigger:
#     platform: sun
#     event: sunset
#     offset: "-00:30:00"
#   # condition: 
#   #   condition: and
#   #   conditions:
#   #     - condition: state
#   #       entity_id: group.all_devices
#   #       state: 'home'
#   #     - condition: state
#   #       entity_id: group.sunset_lights
#   #       state: 'off'
#   action:
#     - service: homeassistant.turn_on
#       entity_id: group.sunset_lights


# #sunset lights on on arrival
# - alias: on arrival sunset lights on 
#   initial_state: false
#   trigger:
#     platform: state
#     to: 'home'
#     from: 'not_home'
#     entity_id: group.all_devices
#   condition: 
#     - condition: sun
#       after: sunset
#     - condition: state
#       state: 'off'
#       entity_id: group.sunset_lights
#     - condition: time
#       before: "00:00:00"
#   action:
#     - service: switch.turn_on
#       entity_id: group.sunset_lights
#     - service: light.turn_on
#       entity_id: light.gateway_light      
#     - service: python_script.notify
#       data:
#         message: "Someone just reached home, switching on sunset lights!"
#         text: 1


# #sunset lights off
# - alias: sunset lights off
#   initial_state: false
#   trigger:
#     platform: time
#     at: '22:00:00'
#   condition: []
#   action:
#     - service: homeassistant.turn_off
#       entity_id: group.sunset_lights
#     # - service: light.turn_on
#     #   entity_id: light.gateway_light      

##############################################################################################################################
#no one at home
- alias: no one at home
  initial_state: true
  trigger:
    platform: state
    to: 'not_home'
    entity_id: group.all_devices
    for:
      minutes: 15
  condition:
    - condition: state
      state: 'not_home'
      entity_id: device_tracker.lalit
    - condition: state
      state: 'not_home'
      entity_id: device_tracker.jyoti
  action:
    - service: python_script.notify
      data:
        message: "Looks like no one at home for last 15 minutes, shutting down everything!"
        text: 1
    - service: script.turn_on
      entity_id: script.shutdown_everything
##############################################################################################################################
#good morning
# - alias: Good Morning
#   initial_state: false
#   trigger:
#     platform: template
#     value_template: "{{ states('sensor.time') == (states.input_datetime.morning_alarm_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
#   condition:
#     condition: state
#     entity_id: binary_sensor.workday
#     state: 'on'
#   action:
#     - service: rest_command.assistant_preset
#       data:
#         preset: wakeup
#     - service: script.play_morning_music_by_room
#       data_template:
#         rname: '{{states.sensor.lalit_room_location.state}}'



#good morning
- alias: Good Morning Spotify 
  initial_state: true
  trigger:
    - platform: template
      value_template: "{{ states('sensor.time') == (states.input_datetime.morning_alarm_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
  condition:
    condition: state
    entity_id: binary_sensor.workday
    state: 'on'
  action:
    - service: script.turn_on
      data:
        entity_id: script.spotify_morning
# # stop evening music
# - alias: stop good morning spotify
#   trigger:
#     - platform: time
#       at: '07:30:00'
#   action:
#     - service: media_player.media_stop
#       entity_id: media_player.spotify
#good evening
# - alias: Good Evening Spotify 
#   initial_state: false
#   trigger:
#     - platform: template
#       value_template: "{{ states('sensor.time') == (states.input_datetime.bed_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
#   # condition:
#   #   condition: state
#   #   entity_id: binary_sensor.workday
#   #   state: 'on'
#   action:
#     - service: script.turn_on
#       data:
#         entity_id: script.spotify_evening
# # stop morning or evening music
# - alias: stop good evening spotify
#   initial_state: true
#   trigger:
#     - platform: time
#       at: '00:00:00'
#     - platform: time
#       at: '08:00:00'
#   action:
#     - service: media_player.media_stop
#       entity_id: media_player.spotify


##############################################################################################################################
- action:
  - data:
      message: Home Assistant is shutting down...
      text: 1
      tell: lalit
      room: office
    service: python_script.notify
  alias: Shutdown Notification
  id: '1515164764817'
  trigger:
  - event: shutdown
    platform: homeassistant

- action:
  - data:
      message: Home Assistant is starting now...
      text: 1
      tell: lalit
      room: office
    service: python_script.notify
  # - data:
  #     name: 'darkcyan'
  #   service: frontend.set_theme
  - data_template:
      level: '{{states.input_select.log_level.state}}'
    service: logger.set_default_level
  alias: Start Notification
  id: '1515164840930'
  trigger:
  - event: start
    platform: homeassistant    
####################################################    

- alias: Hourly Clock Sound
  trigger:
    platform: time_pattern
    hours: '/1'
  condition:
    - condition: state
      state: 'not_home'
      entity_id: device_tracker.jyoti
    - condition: state
      entity_id: input_select.broadcast_mode
      state: 'ANNOUNCE'
  action:
    - service: media_extractor.play_media
      data_template:
        entity_id: "media_player.{{ states.input_select.clock_speaker.state }}"
        media_content_id: "{{states.variable.base_url_full.state}}/local/{{as_timestamp(now())|timestamp_custom('%I',True)|int}}.mp3"
        media_content_type: "music" 


# #automation triggered ####################################################   
- alias : automation triggered
  initial_state: true
  trigger: 
    platform: event
    event_type: automation_triggered
  condition:
    - condition: template
      value_template: '{{trigger.event.data.entity_id != "automation.automation_triggered"}}'
    - condition: state
      state: 'on'
      entity_id: input_boolean.automation_trigger_notification_mode
  action:
    - service: python_script.notify
      data_template:
        message: '{{trigger.event.data.name}}'
        text: 1
        tell: lalit
        



# #############################################################
# - alias: Person detected 
#   initial_state: true    
#   trigger:
#     - platform: event
#       event_type: image_processing.object_detected
#   condition:
#     - condition: template
#       value_template: '{{trigger.event.data.confidence|float>60}}'
#     - condition: or
#       conditions:
#         - condition: state
#           state: 'not_home'
#           entity_id: device_tracker.lalit_nmap
#         - condition: state
#           state: 'not_home'
#           entity_id: device_tracker.jyoti_nmap
#   action:
#     - service: python_script.notify
#       data_template:
#         message: > 
#           '{{trigger.event.data.target_count|int}} Person(s) detected in {{trigger.event.data.entity_id.split(".")[1].split("_")[1] }}, confidence is {{ trigger.event.data.confidence}}'
#     - delay: '00:00:05'
#     - condition: state
#       state: 'on'
#       entity_id: input_boolean.send_camera_picture_notification
#     - service: notify.ha_notifier
#       data_template: 
#         message: 'person detected'
#         data: 
#           photo:
#             #- url: !secret livingroom_camera_url
#             - url: >
#                 {%- set room=trigger.event.data.entity_id.split(".")[1].split("_")[1] -%}
#                 {%- if room=="livingroom" -%}
#                     !secret livingroom_camera_url
#                 {%- elif room=="bedroom" -%}
#                     !secret bedroom_camera_url
#                 {%- endif -%}
# #######################################################################
- alias: face recognised in livingroom
  initial_state: false      
  trigger:
    platform: event
    event_type: image_processing.detect_face
    event_data:
      matched: true
  condition:
    - condition: template
      value_template: '{{trigger.event.data.entity_id.split(".")[1].split("_")[1]=="livingroom"}}'
    - condition: template
      value_template: '{{trigger.event.data.name != "unknown"}}'
    - condition: template
      value_template: >
        {% set sensor = trigger.event.data.name+'_room_location' %}
        {% set current_room = states(sensor) %}
        {% set new_room = "livingroom" %}
        {{current_room != new_room}} 
  action:
    - service: python_script.set_state
      data_template:
        entity_id: sensor.{{trigger.event.data.name}}_room_location
        state: "livingroom"
    - condition: state
      state: 'on'
      entity_id: input_boolean.send_camera_picture_notification
    - service: camera.snapshot
      data_template:
        entity_id: camera.livingroom
        filename: "/config/www/tmp/{{trigger.event.data.name}}-snapshot-livingroom.jpg"
    - service: notify.lalit
      data_template:  
        message: '{{trigger.event.data.name}} in livingroom'
        data: 
          photo:
            - url: "https://delapichome.duckdns.org:9123/local/tmp/{{trigger.event.data.name}}-snapshot-livingroom.jpg"

##########################################################################
# #######################################################################
- alias: face recognised in bedroom
  initial_state: false      
  trigger:
    platform: event
    event_type: image_processing.detect_face
    event_data:
      matched: true
  condition:
    - condition: template
      value_template: '{{trigger.event.data.entity_id.split(".")[1].split("_")[1]=="bedroom"}}'
    - condition: template
      value_template: '{{trigger.event.data.name != "unknown"}}'
    - condition: template
      value_template: >
        {% set sensor = trigger.event.data.name+'_room_location' %}
        {% set current_room = states(sensor) %}
        {% set new_room = "bedroom" %}
        {{current_room != new_room}} 
  action:
    - service: python_script.set_state
      data_template:
        entity_id: sensor.{{trigger.event.data.name}}_room_location
        state: "bedroom"
    - condition: state
      state: 'on'
      entity_id: input_boolean.send_camera_picture_notification
    - service: camera.snapshot
      data_template:
        entity_id: camera.bedroom
        filename: "/config/www/tmp/{{trigger.event.data.name}}-snapshot-bedroom.jpg"
    - service: notify.lalit
      data_template:  
        message: '{{trigger.event.data.name}} in bedroom'
        data: 
          photo:
            - url: "https://delapichome.duckdns.org:9123/local/tmp/{{trigger.event.data.name}}-snapshot-bedroom.jpg"


# #######################################################################
- alias: face recognised in office
  initial_state: true      
  trigger:
    platform: event
    event_type: image_processing.detect_face
    event_data:
      matched: true
  condition:
    - condition: template
      value_template: '{{trigger.event.data.entity_id.split(".")[1].split("_")[1]=="office"}}'
    - condition: template
      value_template: '{{trigger.event.data.name != "unknown"}}'
    - condition: template
      value_template: >
        {% set sensor = trigger.event.data.name+'_room_location' %}
        {% set current_room = states(sensor) %}
        {% set new_room = "office" %}
        {{current_room != new_room}} 
  action:
    - service: python_script.set_state
      data_template:
        entity_id: sensor.{{trigger.event.data.name}}_room_location
        state: "office"
    - condition: state
      state: 'on'
      entity_id: input_boolean.send_camera_picture_notification
    - service: camera.snapshot
      data_template:
        entity_id: camera.office
        filename: "/config/www/tmp/{{trigger.event.data.name}}-snapshot-office.jpg"
    - service: notify.lalit
      data_template:  
        message: '{{trigger.event.data.name}} in office'
        data: 
          photo:
            - url: "https://delapichome.duckdns.org:9123/local/tmp/{{trigger.event.data.name}}-snapshot-office.jpg"
# #######################################################################
# - alias: device info received
#   initial_state: false      
#   trigger:
#     - platform: mqtt
#       topic: 'zanzito/jyoti/device_info'
#     - platform: mqtt
#       topic: 'zanzito/lalit/device_info'
#   action:
#     service: python_script.notify
#     data_template:
#       message: '{{trigger.topic}} - {{trigger.payload}}'
#       text: 1
#       tell: lalit
# #######################################################################
